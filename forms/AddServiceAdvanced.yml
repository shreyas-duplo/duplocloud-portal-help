VolumeMappingsK8s: |-
  Volumes and Volume mount setting in the Duplo simplied format. If you specify Volumes here, Duplo will take care of configuring pod volumes and volume mounts.
  ```yaml
  ---
  # Statefulset using EBS volume
  - AccessMode: ReadWriteOnce
    Name: data
    Path: /attachedvolume
    Size: 10Gi
  # Deployment using host directory mount in read-only mode
  - Name: rootfs   # Name of the volume
    Path: /rootfs  # Path in the container
    ReadOnly: true # Set if it is readonly mount
    Spec:          # K8s Defined volumes
      HostPath:
        Path: /    # Path on the host
  # Deployment using host directory mount in read-write mode
  - Name: var-run
    Path: /var/run
    Spec:
      HostPath:
        Path: /var/run
  # Deployment mounting secret into directory
  - Name: nginx
    Path: /etc/nginx/conf.d
    Spec:
      Secret:
        SecretName: nginx
  # Deployment mounting config map into directory
  - Name: nginx
    Path: /etc/nginx/conf.d
    Spec:
      ConfigMap:
        Name: nginx
  # Deployment using PersistentVolumeClaim. 
  - Name: nginx
    Path: /usr/share/nginx/html
    Spec:
      PersistentVolumeClaim:
        claimName: efs-claim
  ```
PodConfigK8s: |-
  Deployment and Pod confiiguration
  ```yaml
  Subdomain: same-name-as-my-service
  Labels:
    label1: values1
  Annotations:
    seccomp.security.alpha.kubernetes.io/pod: docker/default
  PodLabels:
    label1: values1
  PodAnnotations:
    seccomp.security.alpha.kubernetes.io/pod: docker/default
  RestartPolicy: Always
  PodSecurityContext:
    RunAsUser: 1000
    RunAsGroup: 3000
    FsGroup: 2000
  Volumes:
    - name: cache-volume
      emptyDir: {}
    - name: config-vol
      configMap:
        name: log-config
        items:
          - key: log_level
            path: log_level
  ImagePullSecrets:
    - name: myregistrykey
  ServiceAccountName: my-service-account-name
  AutomountServiceAccountToken: true
  # mount secretprovider class volume
  Volumes:
  - Name: secretvolume-name
    Csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      VolumeAttributes:
        secretProviderClass: my-secret-provider-class
  # deployment strategy
  DeploymentStrategy:
    RollingUpdate:
      MaxSurge: 1
      MaxUnavailable: 0  
  
  ```
ContainerConfigK8s: |-
  Deployment and Pod configurations
  ```yaml
  ImagePullPolicy: IfNotPresent
  Args:
    - '-- somearg'
  LivenessProbe:
    httpGet:
      path: /
      port: 80
      httpHeaders:
        - name: Custom-Header
          value: Awesome
    initialDelaySeconds: 3
    periodSeconds: 3
  ReadinessProbe:
    exec:
      command:
        - cat
        - /tmp/healthy
    initialDelaySeconds: 5
    periodSeconds: 5
  startupProbe:
    initialDelaySeconds: 1
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 1
    exec:
      command:
        - cat
        - /etc/nginx/nginx.conf
  SecurityContext:
    Capabilities:
      Add:
      - NET_BIND_SERVICE
      Drop:
      - ALL
    ReadOnlyRootFilesystem: false
    RunAsNonRoot: true
    RunAsUser: 1000
  AutomountServiceAccountToken: true
  VolumesMounts:
  EnvFrom:
  - secretRef:
      name: secret_name
  - configMapRef:
      name: configmap-name
  # Mount SecretProvider
  VolumesMounts:
  - Name: volume-name
    MountPath: /mnt/secrets
    readOnly: true
  EnvFrom:
  - SecretRef:
      Name: secretobject-name
  # Set Resource Request and Limits
  resources:
    requests:
      memory: "10Gi"
      cpu: "500m"
      ephemeral-storage: 2Gi
    limits:
      memory: "10Gi"
      cpu: "500m"
      ephemeral-storage: 4Gi
  # Pod Toleration example
  tolerations:
  - key: key1
    operator: Equal
    value: value1
    effect: NoSchedule
  - key: example-key
    operator: Exists
    effect: NoExecute
    tolerationSeconds: 6000
  #lifecycle hook sample
  lifecycle:
    postStart:
      exec:
        command:
          - /bin/sh
          - '-c'
          - date > /container-started.txt
    preStop:
      exec:
        command:
          - /usr/sbin/nginx
          - '-s'
          - quit
  ```
VolumeMappings: |
  Example of mounting a host drive into the container
  ```js
  "/home/ubuntu/data:/data","/home/ubuntu/confg:/config"
  ```
otherDockerConfig: |
  Any custom docker create container can be passed here based
    on the documentation at https://docs.docker.com/engine/api/v1.41/#operation/ContainerCreate
    for example the following config overrides the entrypoint of the container and
    sets a few labels
  ```js
  {
    "Entrypoint": [
      "/bin/bash",
      "-c",
      "sleep 1h"
    ],
    "Labels": {
      "com.example.vendor": "Acme",
      "com.example.license": "GPL",
      "com.example.version": "1.0"
    }
  }
  ```